{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "12417f1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Splinter, BeautifulSoup, and Pandas\n",
    "from splinter import Browser\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0973c325",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_all():\n",
    "    # Initiate headless driver for deployment\n",
    "    from webdriver_manager.chrome import ChromeDriverManager\n",
    "    executable_path = {'executable_path': ChromeDriverManager().install()}\n",
    "    browser = Browser('chrome', **executable_path, headless=True)\n",
    "\n",
    "    # Scrape news title and news paragraph -> https://redplanetscience.com/\n",
    "    url = \"https://redplanetscience.com/\"\n",
    "    browser.visit(url)\n",
    "    html = browser.html\n",
    "    soup = bs(html, 'html.parser')\n",
    "\n",
    "    # Retrieve the latest news title\n",
    "    news_title = soup.find('div', class_='content_title').text\n",
    "    # Retrieve the latest news paragraph\n",
    "    news_para = soup.find('div', class_='article_teaser_body').text\n",
    "\n",
    "    # Scrape Mars Image -> https://spaceimages-mars.com/\n",
    "    jpl_image_url = \"https://spaceimages-mars.com/\"\n",
    "    browser.visit(jpl_image_url)\n",
    "    # Find and click the full image button\n",
    "    full_image_elem = browser.find_by_tag('button')[1]\n",
    "    full_image_elem.click()\n",
    "\n",
    "    html = browser.html\n",
    "    soup = bs(html,\"html.parser\")\n",
    "\n",
    "    # find the relative image url\n",
    "    img_url_rel = soup.find('img', class_='fancybox-image').get('src')\n",
    "    featured_img_url = jpl_image_url + img_url_rel\n",
    "    \n",
    "    # Scrape Mars facts -> https://galaxyfacts-mars.com/\n",
    "    url = 'https://galaxyfacts-mars.com/'\n",
    "    tables = pd.read_html(url)\n",
    "    \n",
    "    mars_fact = tables [1]\n",
    "\n",
    "    mars_fact.columns = ['Profile', 'Value']\n",
    "    mars_fact.set_index('Profile', inplace=True)\n",
    "\n",
    "    fact_table = mars_fact.to_html()\n",
    "\n",
    "    fact_table.replace('\\n','')\n",
    "\n",
    "  # Visit USGS webpage for Mars hemispehere images\n",
    "    hemisphere_url = \"https://marshemispheres.com/\"\n",
    "    browser.visit(hemisphere_url)\n",
    "    html = browser.html\n",
    "    soup = bs(html,'html.parser')\n",
    "\n",
    "    def scrape_img(search_url):\n",
    "    # Retrieve page with the requests module\n",
    "        response = requests.get(search_url)\n",
    "        soup = bs(response.text, \"html.parser\")\n",
    "        # Store high resolution image URL to create a final hemisphere image URL\n",
    "        hem_img_url = soup.find('img', class_='wide-image')['src']\n",
    "        final_img_url = hemisphere_url + hem_img_url\n",
    "        # Store the image url information into a dictionary\n",
    "        title_img_dicts['image_url'] = final_img_url\n",
    "        \n",
    "        return (title_img_dicts['image_url'])          \n",
    "            \n",
    "    def dict_to_list(title_img_dicts):\n",
    "        new_dict = {}\n",
    "        \n",
    "        copy_dict = title_img_dicts.copy()\n",
    "        new_dict.update(copy_dict)\n",
    "        \n",
    "        return (new_dict)\n",
    "    \n",
    "    # Use a Python dictionary to store the data using the keys image URL and title\n",
    "\n",
    "    img_containers = soup.find_all('div', class_='item')\n",
    "\n",
    "    # Empty list to import image reference links\n",
    "    img_url = []\n",
    "\n",
    "    # Empty dictionary to holds title information and URL of image\n",
    "    title_img_dicts = {}\n",
    "\n",
    "    # Empty list to hold each dictionary of title and full img url\n",
    "    hemisphere_img_urls = []\n",
    "\n",
    "    # Extract the title and full image URL\n",
    "    for img in img_containers:\n",
    "        title_img_dicts['title'] = img.find('h3').text\n",
    "        img_link = img.find('a', class_='itemLink product-item')['href']\n",
    "        img_url.append(img_link)\n",
    "        img_url_list = [hemisphere_url + url for url in img_url]\n",
    "        \n",
    "        for search_url in img_url_list:\n",
    "            scrape_img(search_url)\n",
    "        \n",
    "    # Append the empty dictionary with the image URL string and the hemisphere title\n",
    "\n",
    "        hemisphere_img_urls.append(dict_to_list(title_img_dicts))\n",
    "\n",
    "    # Create dictionary for all info scraped from sources above\n",
    "    mars_dict = {\n",
    "        \"news_title\": news_title,\n",
    "        \"news_para\": news_para,\n",
    "        \"featured_img_url\": featured_img_url,\n",
    "        \"fact_table\": fact_table,\n",
    "        \"hemisphere_images\": hemisphere_img_urls\n",
    "    }\n",
    "\n",
    "    return mars_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c0560a3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
